@page
@model Home.Pages.ContactUsModel
@using AspNetCore.ReCaptcha
@{
    ViewData["Title"] = "Contact Us";
}

<h2>@ViewData["Title"]</h2>

@if (Model._isCaptchaValid)
{
    <p>Your message has been sent successfully!</p>
}
else
{
    <form method="post" id="demo-form">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="message">Message:</label>
            <textarea id="message" name="message" class="form-control" rows="5" required></textarea>
        </div>
        <div class="form-group">
            <button class="g-recaptcha"
                    data-sitekey="6LfNjcMpAAAAAAy6svoJhA3qN8nM5HFDtdRJyjeI"
                    data-callback='onSubmit'
                    data-action='submit'>
                Submit
            </button>
        </div>
    </form>
}

@section Scripts
{        
   <script>
        function onClick(e) {
            e.preventDefault();
            grecaptcha.enterprise.ready(async () => {
                const token = await grecaptcha.enterprise.execute('6LfNjcMpAAAAAAy6svoJhA3qN8nM5HFDtdRJyjeI', { action: 'submit' });
                document.getElementById("foo").value = token;
            });
        }
    </script>

    <script>
        function onSubmit(token) {
            document.getElementById("demo-form").submit();
        } // Use `requestSubmit()` for extra features like browser input validation.
    </script>
}